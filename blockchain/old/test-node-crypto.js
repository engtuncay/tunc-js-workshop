// Node.js Blockchain Test - Crypto-JS yerine Node.js crypto mod√ºl√º kullanƒ±r
import { Block } from './block-node-crypto.js';
import { Blockchain } from './blockchain-node-crypto.js';

console.log('üöÄ Node.js Crypto Blockchain Test Ba≈ülƒ±yor...\n');

// Yeni blockchain olu≈ütur
const myBlockchain = new Blockchain();

console.log('üìä ƒ∞lk durum:');
myBlockchain.displayBlockchain();

// Test: Ba≈ülangƒ±√ß bakiyelerini olu≈ütur
console.log('\nü™ô Ba≈ülangƒ±√ß bakiyelerini olu≈üturuyor...');
myBlockchain.initializeBalances();

// Test: Bakiyeleri kontrol et
console.log('\nüí∞ T√ºm bakiyeler:');
myBlockchain.displayAllBalances();

// Test: ƒ∞≈ülem olu≈ütur
console.log('\nüìù ƒ∞≈ülem olu≈üturuluyor...');
try {
    myBlockchain.createTransaction({
        fromAddress: 'ahmet-wallet',
        toAddress: 'mehmet-wallet',
        amount: 100
    });

    myBlockchain.createTransaction({
        fromAddress: 'ayse-wallet',
        toAddress: 'miner1-wallet',
        amount: 50
    });

    console.log('‚úÖ ƒ∞≈ülemler ba≈üarƒ±yla olu≈üturuldu');
} catch (error) {
    console.error('‚ùå ƒ∞≈ülem hatasƒ±:', error.message);
}

// Test: Bekleyen i≈ülemleri mine et
console.log('\n‚õèÔ∏è Bekleyen i≈ülemler mine ediliyor...');
const miningResult = myBlockchain.minePendingTransactions('miner1-wallet');

console.log(`\nüìä Mining Sonu√ßlarƒ±:`);
console.log(`Hash: ${miningResult.hash}`);
console.log(`S√ºre: ${miningResult.time}ms`);
console.log(`Hash Rate: ${miningResult.hashRate} hash/s`);
console.log(`Nonce: ${miningResult.nonce}`);

// Test: G√ºncellenmi≈ü bakiyeler
console.log('\nüí∞ Mining sonrasƒ± bakiyeler:');
myBlockchain.displayAllBalances();

// Test: Blockchain ge√ßerliliƒüi
console.log('\nüîç Blockchain ge√ßerliliƒüi kontrol ediliyor...');
const isValid = myBlockchain.isChainValid();
console.log(`Blockchain ge√ßerli: ${isValid ? '‚úÖ' : '‚ùå'}`);

// Test: Bireysel bakiye sorgusu
console.log('\nüîç Bireysel bakiye sorgularƒ±:');
const addresses = ['ahmet-wallet', 'mehmet-wallet', 'ayse-wallet', 'miner1-wallet'];
addresses.forEach(address => {
    const balance = myBlockchain.getBalance(address);
    console.log(`${address}: ${balance} coin`);
});

// Test: Difficulty ayarlama
console.log('\n‚öôÔ∏è Difficulty ayarlama testi...');
console.log(`Mevcut difficulty: ${myBlockchain.difficulty}`);
myBlockchain.adjustDifficulty();
console.log(`Yeni difficulty: ${myBlockchain.difficulty}`);

// Test: Daha fazla mining
console.log('\n‚õèÔ∏è Ek mining yapƒ±lƒ±yor...');
for (let i = 0; i < 2; i++) {
    myBlockchain.createTransaction({
        fromAddress: null, // Mining reward
        toAddress: 'miner1-wallet',
        amount: 100
    });
    
    const result = myBlockchain.minePendingTransactions('miner1-wallet');
    console.log(`Blok ${i + 2} mine edildi: ${result.hash.substring(0, 16)}...`);
}

// Son durum
console.log('\nüìä Final Blockchain Durumu:');
myBlockchain.displayBlockchain();

console.log('\nüéâ Node.js Crypto Blockchain Test Tamamlandƒ±!');